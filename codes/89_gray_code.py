"""
格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。

给定一个代表编码总位数的非负整数 n，打印其格雷编码序列。即使有多个不同答案，你也只需要返回其中一种。

格雷编码序列必须以 0 开头。

 

示例 1:

输入: 2
输出: [0,1,3,2]
解释:
00 - 0
01 - 1
11 - 3
10 - 2

对于给定的 n，其格雷编码序列并不唯一。
例如，[0,2,3,1] 也是一个有效的格雷编码序列。

00 - 0
10 - 2
11 - 3
01 - 1
示例 2:

输入: 0
输出: [0]
解释: 我们定义格雷编码序列必须以 0 开头。
     给定编码总位数为 n 的格雷编码序列，其长度为 2n。当 n = 0 时，长度为 20 = 1。
     因此，当 n = 0 时，其格雷编码序列为 [0]。
"""


"""
迭代法
i = 0
res = [0]
i = 1
res = [0, 1]
i = 2
res = [00,01,10,11]
都是在上一个的基础上，分别在第一位增加0或者1，增加0则数不变，增加1则为增加2^n-1
i = 3 时，res = [000,001,010,011,100,101,110,111]
可见第四个数(011)和第五个数(100)差三位不符合规则，第八个数(111)一定符合(因为一定只差第一位)
且第八位和第七位，第七和第六，第六和第五一定差一位
故可得到规则，由i = n的结果推i = n+1的结果：
直接倒序遍历i = n的结果，并分别在首位加上1，即加上2^n-1即i << n-1
"""
def gen_gray(n: int) -> list:
    res = [0]
    if n == 0:
        return res
    for i in range(n):
        temp = 1 << i
        for j in range(len(res) - 1, -1, -1):
            res.append(res[j] + temp)
    return res


"""
公式法
二进制 bn-1 bn-2 ... 0 
gi = bi ^ bi >> 1
"""
def gen_gray2(n: int) -> list:
    res = []
    for i in range(1 << n):
        res.append(i ^ i >> 1)
    return res


if __name__ == "__main__":
    print(gen_gray(3))
    print(gen_gray2(3))
