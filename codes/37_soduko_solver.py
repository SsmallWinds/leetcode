"""
编写一个程序，通过已填充的空格来解决数独问题。

一个数独的解法需遵循如下规则：

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
空白格用 '.' 表示。

解数独

Note:

给定的数独序列只包含数字 1-9 和字符 '.' 。
你可以假设给定的数独只有唯一解。
给定数独永远是 9x9 形式的。

"""
import sys


def valid(raw: list, row: int, col: int, val: str) -> bool:
    for i in range(9):
        if raw[row][i] == val:
            return False

    for i in range(9):
        if raw[i][col] == val:
            return False

    start_row = int(row / 3) * 3
    start_col = int(col / 3) * 3

    for i in range(3):
        for j in range(3):
            if raw[start_row + i][start_col + j] == val:
                return False
    return True


# 回溯法
# TODO::剪枝
def solver(raw: list) -> bool:
    for i in range(9):
        for j in range(9):
            if raw[i][j] == '.':
                k = 1
                while k <= 9:
                    if valid(raw, i, j, str(k)):
                        raw[i][j] = str(k)
                        # 当前值不可能成功时，将raw[i][j]置为'.'回溯
                        if solver(raw):
                            return True
                        else:
                            raw[i][j] = '.'
                    k += 1
                return False
    return True


if __name__ == '__main__':
    sys.setrecursionlimit(999999999)
    '''
    raw = [["5","3","4","6","7","8","9","1","2"],
          ["6","7","2","1","9","5","3","4","8"],
          ["1","9","8","3","4","2","5","6","7"],
          ["8",".","9","7","6","1","4","2","3"],
          ["4","2","6","8","5","3","7","9","1"],
          ["7","1","3","9","2","4","8","5","6"],
          ["9","6","1","5","3","7","2","8","4"],
          ["2","8","7","4","1","9","6","3","5"],
          ["3","4","5","2","8","6","1","7","9"]]

    raw = [["5","3",".",".","7",".",".",".","."],
          ["6",".",".","1","9","5",".",".","."],
          [".","9","8",".",".",".",".","6","."],
          ["8",".",".",".","6",".",".",".","3"],
          ["4",".",".","8",".","3",".",".","1"],
          ["7",".",".",".","2",".",".",".","6"],
          [".","6",".",".",".",".","2","8","."],
          [".",".",".","4","1","9",".",".","5"],
          [".",".",".",".","8",".",".","7","9"]]
    '''
    raw = [[".", "3", ".", ".", "7", ".", ".", ".", "."],
           [".", ".", ".", "1", "9", "5", ".", ".", "."],
           [".", "9", "8", ".", ".", ".", ".", "6", "."],
           [".", ".", ".", ".", "6", ".", ".", ".", "3"],
           [".", ".", ".", "8", ".", "3", ".", ".", "1"],
           [".", ".", ".", ".", "2", ".", ".", ".", "6"],
           [".", "6", ".", ".", ".", ".", "2", "8", "."],
           [".", ".", ".", "4", "1", "9", ".", ".", "5"],
           [".", ".", ".", ".", "8", ".", ".", "7", "9"]]

    print(solver(raw))
    for row in raw:
        print(row)
