"""
给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个位置。

示例 1:

输入: [2,3,1,1,4]
输出: true
解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。
示例 2:

输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。

思路:
和45题类似
45题求最小步数
直接使用贪心的思想，计算能跳到的最远位置，看是否 > len 即可
"""


def jump(raw: list) -> bool:
    longest = 0
    end = 0
    for i in range(len(raw) - 1):
        longest = max(longest, i + raw[i])
        if i == end:
            end = longest

    return longest >= len(raw) - 1


if __name__ == '__main__':
    print(jump([3, 2, 1, 0, 4]))
